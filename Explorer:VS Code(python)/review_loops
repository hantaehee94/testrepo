colors = ["red","orange", "yellow", "green", "blue", "indigo", "violet"]
for color in colors:
    print(color)
print(color)
# insight : for loop를 작성하기 전에 굳이 color 변수를 선언할 필요는 없다. 그것이 일반적인 코딩 스타일.

for number in range(1,11):
    print(number)

fruits = ["apple", "banana", "orange"]
for index, fruit in enumerate(fruits):
    print(f"At position {index}, I found a {fruit} ")

# while loop
count = 1
while count <= 10:
    print(count)
    count += 1
print(count)

# For loop exmaple
dates = [1982, 1980, 1973]
N = len(dates)
for i in range(N):
    print(dates[i])
"""
위 코드의 의미는, dates list의 길이(여기선 3)을 N에 저장하고, 
for loop를 통해 i 변수를 선언하고 range 함수를 통해 0부터 2(3-1)까지의 숫자를 i에 저장하면서,
dates list의 i번째 값을 출력하는 것이다.
"""

for i in range(8):
    print(i)

# list 안의 elements를 출력하는 방법 for loop vs direct
for year in dates:
    print(year)
dates
"""
무엇이 더 좋은 방법일까?
for 루프 : 리스트의 요소를 개별적으로 출력 | 각 요소를 한 줄씩 출력하고 싶을 때
직접 출력 : 리스트 전체를 [ ] 형태로 출력 | 데이터 확인, 디버깅
"""

# loop를 통해 list의 element를 변경하는 방법
squares = ["red", "yellow", "green", "purple", "blue"]
for i in range(0, 5):
    print("Before square ", i, 'is',  squares[i])
    squares[i] = 'white'
    print("After square ", i, 'is',  squares[i])
squares

# Loop through the list and iterate on both index and element value
squares = ["red", "yellow", "green", "purple", "blue"]
for i, square in enumerate(squares):
    print(i, square)

# Basic while loop example
dates = [1982, 1980, 1973, 2000]
i = 0
year = dates[0]
while(year !=1973):
    print(year)
    i = i + 1
    year = dates[i]

# 1973이 아놀 때까지 loop를 돌리고 1973까지 출력하는 방법이다.
dates = [1982, 1980, 1973, 2000]
i = 0
year = dates[0]
while(year !=1973):
    year = dates[i]
    i = i + 1
    print(year)

